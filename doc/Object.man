[comment {-*- tcl -*- nx::Object manpage}]
[manpage_begin nx::Object n 2.0b6]

[keywords baseclass]
[keywords NX]
[keywords "mixin class"]
[keywords "re-classification"]
[keywords "submethod"]
[keywords "method ensemble"]
[keywords "linearisation"]

[vset SCOPE "object"]
[vset CMD "::obj"]
[vset SCOPEMODIFIER "object"]

[copyright {2014 Stefan Sobernig <stefan.sobernig@wu.ac.at>, Gustaf Neumann <gustaf.neumann@wu.ac.at>}]
[titledesc {nx::Object API Reference}]

[description]
[para]

[syscmd nx::Object] is the [term baseclass] of the [term NX] object system. All
objects defined in [term NX] are (direct or indirect) instances of this
[term baseclass]. The methods provided by the [syscmd nx::Object]
[term baseclass] are available to all objects and to all classes defined in
NX.

[para]
[comment {Hier w√§re eine Stellung der jeweiligen Klasse als UML-Diagramm in der Klassenhierarchie nett.}]

[term NX] allows for creating and for using objects which are not
derived from any application class (see [cmd ::nx::Class]), that is,
as direct instances of the [term baseclass] [cmd nx::Object]. Typical use cases are
singeltons and anonymous, inline objects. In such use cases, [term NX]
does not require creating an intermediate application class, which
specializes the [term baseclass] [cmd nx::Object], beforehand.

[list_begin definitions]


[call [cmd nx::Object] [method create] [arg objectName] [opt "-object-mixin [arg mixinSpec]"] [opt "-class [arg newClassName]"] [opt "-object-filter [arg filterSpec]"] [opt [arg initBlock]]]

[para] 

To create a direct instance of [cmd nx::Object] having an explicit
[arg objectName], use [method create] on [cmd nx::Object]. Note that
[method create] is defined by [cmd nx::Class] and is available to [cmd nx::Object] being
an instance of [cmd nx::Class]. This way, singelton objects can be
created, for example.

[call [cmd nx::Object] [method new] [opt "-object-mixin [arg mixinSpec]"] [opt "-class [arg newClassName]"] [opt "-object-filter [arg filterSpec]"] [opt [arg initBlock]]]

To create a direct instance of [cmd nx::Object] having an
automatically assigned, implict object name, use [method new] on [cmd nx::Object]. Note
that [method new] is defined by [cmd nx::Class] and is available to
[cmd nx::Object] being an instance of [cmd nx::Class]. Using [method new] allows
for creating anonymous, inline objects, for example.

[list_end]

The configuration options for direct instances of [cmd nx::Object],
which can be passed when calling [method create] and [method new], are
documented in the subsequent section.

[section {Configuration Options for Instances of nx::Object}]

[para] Configuration options can be used for configuring objects during
their creation by passing the options as non-positional arguments into calls
of [method new] and [method create] (see [cmd nx::Class]). An
existing object can be queried for its current configuration using
[method cget] and it can be re-configured using [method configure].

[list_begin options]

[opt_def -class [arg className]]

Retrieves the current class of the object or sets the object's class to [arg className], if provided.

[opt_def -object-filter [arg filterMethods]]

Retrieves the list of currently active per-object filter methods or sets
a list of per-object filter methods, if [arg filterMethods] is
provided.

[opt_def -object-mixin [arg mixinSpecs]]

Retrieves the list of currently active per-object mixin specifications
or sets a list of per-object mixin specifications to become
active. [arg mixinSpecs] is of the form of ...

[comment {
  [opt_def -volatile]

  A volatile object is automatically destroyed (see [method destroy])
  when, during program execution, the variable scope, in which [option -volatile] was
  configured for a given object for the first time (e.g., the call frame
						    of a proc), is cleaned up.
}]

[list_end]

[section {Call Protection for Behavioral Features of nx::Object Instances}]

[list_begin itemized]
[item] [const public]
[item] [const protected]
[item] [const private]
[list_end]

[section {Methods for Instances of nx::Object}]

[list_begin commands]

[cmd_def cget]

[list_begin definitions]

[call [arg obj] [method cget] [arg configurationOption]] 

The method is used to obtain the current value of [arg configurationOption] for
[arg obj]. The configuration options
available for querying through [method cget] are determined by the
configurable properties defined by the class hierarchy of [arg obj]. The
queriable configuration options for [arg obj] can be
obtained by calling [method "info configure"]. The [arg configurationOption] can
be set and modified using [method configure].

[example_begin]
% nx::Object create obj
::obj
% ::obj info configure
?-object-mixin /mixinreg .../? ?-class /class/? ?-object-filter /filterreg .../? ?/__initblock/?
% ::obj cget -class
::nx::Object
[example_end]

[list_end]

[cmd_def configure]

[list_begin definitions]

[call [arg obj] [method configure] [opt "[arg configurationOption] [arg value] ..."]]

This method sets configuration options on an object. The configuration
options available for setting on [arg obj] are determined by the
configurable properties defined by the class hierarchy of [arg obj]. The
settable configuration options for [arg obj] can be
obtained by calling [method "info configure"]. Furthermore, [method configure] is
also called during object construction. Under object construction, it receives
the arguments passed into calls of [method create] and [method new]. Options
set using [method configure] can be retrieved using [method cget].

[example_begin]
% nx::Class create Foo {:property x}
::Foo
% Foo create f1 -x 101
::f1
% f1 cget -x
101
% f1 configure -x 200
% f1 cget -x
200
[example_end]

[list_end]


[cmd_def contains]

[list_begin definitions]

[call [arg obj] [cmd contains] [opt "-withnew [arg trueFalse]"] [opt "-object [arg objectName]"] [opt "-class [arg className]"] [arg cmds]]

This methods acts as a builder for nested object structures. Object
and class construction statements passed to this method as its last
argument [arg cmds] are evaluated in a way so that the receiver object
[arg obj] becomes the parent of the newly constructed objects and
classes. This is realized by setting explicitly the namespace for
constructing relatively named objects. Fully qualified object names in
[arg cmds] evade the nesting.

[para]

[option "-withnew [arg trueFalse]"] requests the automatic rescoping of
objects created using [method new] so that they become nested into the
receiver object [arg obj], rather than being created in the default
namespace for autonamed objects (i.e., ::nsf). If turned off,
autonamed objects do not become children of [arg obj].

[para]

The parent object to be used instead of [arg obj] can be specified
using [option "-object [arg objectName]"]. If this explicitly set parent
object does not exist prior to calling [method contains], it will be
created on the fly as a direct instance of [cmd nx::Object]. Alternatively,
using [option "-class [arg className]"], a class [arg className] other
than [cmd nx::Object] for the on-the-fly creation of [arg objectName]
can be provided.

[example {
% nx::Class create Window {
  :contains {
    #
    # Become children of Window, implicitly
    #
    nx::Class create Header; # Window::Header
    nx::Object create Panel; # Window::Panel
  }
  #
  # Explicitly declared a child of Window using [self]
  #
  nx::Class create [self]::Slider; # Window::Slider
  #
  # Fully-qualified objects do not become nested
  #
  nx::Class create ::Door; # ::Door
}
::Window
% ::Window info children
::Window::Panel ::Window::Header ::Window::Slider
}]

[list_end]

[cmd_def copy]

[list_begin definitions]

[call [arg obj] [cmd copy] [arg newObjectName]]

Creates a full and deep copy of a source object [arg obj]. The
object's copy [arg newObjectName] features all structural and
behavioral properties of the source object, including object
variables, per-object methods, nested objects, slot objects,
namespaces, filters, mixins, and traces.

[list_end]

[cmd_def destroy]

[list_begin definitions]

[call [arg obj] [cmd destroy]]

This method allows for explicitly destructing an object [arg obj],
potentially prior to [arg obj] being destroyed by the object system
(e.g., during the shutdown of the object system upon calling [syscmd exit]):

[example {[nx::Object new] destroy}]

By providing a custom implementation of [method destroy], the
destruction procedure of [arg obj] can be customized. Typically, once
the application-specific destruction logic as has completed, a custom
[method destroy] will trigger the actual, physical object destruction
via [cmd next].

[example {
% [nx::Object create obj {
  :public method destroy {} {
    puts "destroying [self]"
    next; # physical destruction
  }
}] destroy
destroying ::obj
}]

A customized object-desctruction scheme can be made shared between the instances
of a class, by defining the custom [method destroy] for an
application class:

[example_begin]
% nx::Class create Foo {
    :method destroy {} {
      puts "destroying [lb]self[rb]"
      next; # physical destruction
    }
}
::Foo
% Foo create f1
::f1
% f1 destroy
destroying ::f1
[example_end]

Physical destruction is performed by clearing the in-memory object
storage of [arg obj]. This is achieved by passing [arg obj] into a
call to [method dealloc] provided by [cmd nx::Class]. A near, scripted
equivalent to the C-implemented [method destroy] provided by [cmd nx::Object] would look
as follows:

[example {
% Object method destroy {} {
  [:info class] dealloc [self]
}
}]

Note, however, that [method destroy] is protected against
application-level redefinition. Trying to evaluate the above script snippet yields: 

[example {
refuse to overwrite protected method 'destroy'; derive e.g. a sub-class!  
}]

A custom [method destroy] must be provided as a refinement in a
subclass of [cmd nx::Object] or in a [term "mixin class"].

[list_end]

[cmd_def eval]

[list_begin definitions]

[call [arg obj] [method eval] [arg arg] [opt "[arg arg] ..."]]

Evaluates a special Tcl script for the scope of [arg obj] in the style
of Tcl's [cmd eval]. There are, however, notable differences to the
standard [cmd eval]: In this script, the colon-prefix notation is available to
dispatch to methods and to access variables of [arg obj]. Script-local
variables, which are thrown away once the evaluation of the script has
completed, can be defined to store intermediate results.

[example { 
  % nx::Object create obj {
    :object property {bar 1}
    :public object method foo {x} { return $x }
  }
  ::obj
  % ::obj eval {
    set y [:foo ${:bar}]
  }
  1
}]

[list_end]


[cmd_def forward]

[list_begin definitions]

[include forward.man.inc]

[list_end]

[cmd_def info]

[list_begin definitions]

[call [arg obj] [method info] [method children] [opt "[option -type] [arg className]"] [opt [arg pattern]]]

Retrieves the list of nested (or aggregated) objects of [arg obj]. The
resulting list contains the fully qualified names of the nested
objects. If [option -type] is set, only nested objects which are
direct or indirect instances of class [arg className] are
returned. Using [arg pattern], only nested objects whose names match
[arg pattern] are returned. The [arg pattern] string can contain
special matching characters (see [cmd "string match"]). This method
allows for introspecting on [method contains].

[call [arg obj] [method info] [method class]]

Returns the fully qualified name of the current [cmd nx::Class] of
[arg obj]. In case of [term "re-classification"] (see [method configure]), the
returned class will be different from the [cmd nx::Class] from which [arg obj] was
originally instantiated using [method create] or [method new].

[call [arg obj] [method info] [method configure]]

Lists all configuration options available for [arg obj]. These include
the [sectref {Configuration Options for Instances of nx::Object} "configuration options"] provided
by [cmd nx::Object]. The available configuration options can be
modified using [method configure], their current value can be queried
using [method cget].

[call [arg obj] [method info] [method has] [method mixin] | [method namespace] | [method type] [opt ...]]

[list_begin definitions]
[def "[arg obj] [method info] [method has] [method mixin] [arg className]"] 

Verifies whether [arg obj] has a given [cmd nx::Class] [arg className] registered as a [term "mixin class"] (returns: [const true]) or not (returns: [const false]).

[def "[arg obj] [method info] [method has] [method namespace]"]

Checks whether the object has a companion Tcl namespace (returns:
[const true]) or not (returns: [const false]). The namespace could
have been created using, for example, [method "object require namespace"]. 

[comment {Note that the results do not necessarily correspond
  to those yielded by '''[namespace exists /obj/]'''.}]

[def "[arg obj] [method "info has type"] [arg className]"]

Tests whether the [cmd nx::Class] [arg className] is a type of the
object (returns: [const true]) or not (returns: [const false]). That
is, the method checks whether the object is a direct instance of [arg className] or
an indirect instance of one of the superclasses of [arg className].

[list_end]

[call [arg obj] [method {info info}]]
Lists the available [term "submethod"]s of the [method info] [term "method ensemble"].

[call [arg obj] [method {info lookup configure parameters}] ...]
[para] Description of [method {info lookup configure parameters}] ...


[call [arg obj] [method {info lookup configure syntax}] ...]
[para] Description of [method {info lookup configure syntax}] ...


[call [arg obj] [method {info lookup filter}] ...]
[para] Description of [method {info lookup filter}] ...

[call [arg obj] [method {info lookup method}] ...]
[para] Description of [method {info lookup method}] ...

[call [arg obj] [method {info lookup methods}] ...]
[para] Description of [method {info lookup methods}] ...

[call [arg obj] [method {info lookup slots}] ...]
[para] Description of [method {info lookup slots}] ...

[call [arg obj] [method {info lookup variables}] ...]
[para] Description of [method {info lookup variables}] ...

[call [arg obj] [method {info name}]]

Returns the unqualified name of an object, i.e., the object name
without any namespace qualifiers.

[call [arg obj] [method {info object filter guard}] ...]
[para] Description of [method {info object filter guard}] ...

[call [arg obj] [method {info object filter methods}] ...]
[para] Description of [method {info object filter methods}] ...

[call [arg obj] [method {info object method args}] ...]
[para] Description of [method {info object method args}] ...

[call [arg obj] [method {info object method body}] ...]
[para] Description of [method {info object method body}] ...

[call [arg obj] [method {info object method definition}] ...]
[para] Description of [method {info object method definition}] ...

[call [arg obj] [method {info object method definitionhandle}] ...]
[para] Description of [method {info object method definitionhandle}] ...

[call [arg obj] [method {info object method exists}] ...]
[para] Description of [method {info object method exists}] ...

[call [arg obj] [method {info object method handle}] ...]
[para] Description of [method {info object method handle}] ...

[call [arg obj] [method {info object method origin}] ...]
[para] Description of [method {info object method origin}] ...

[call [arg obj] [method {info object method parameters}] ...]
[para] Description of [method {info object method parameters}] ...

[call [arg obj] [method {info object method postcondition}] ...]
[para] Description of [method {info object method postcondition}] ...

[call [arg obj] [method {info object method precondition}] ...]
[para] Description of [method {info object method precondition}] ...

[call [arg obj] [method {info object method registrationhandle}] ...]
[para] Description of [method {info object method registrationhandle}] ...

[call [arg obj] [method {info object method returns}] ...]
[para] Description of [method {info object method returns}] ...

[call [arg obj] [method {info object method submethods}] ...]
[para] Description of [method {info object method submethods}] ...

[call [arg obj] [method {info object method syntax}] ...]
[para] Description of [method {info object method syntax}] ...

[call [arg obj] [method {info object method type}] ...]
[para] Description of [method {info object method type}] ...

[call [arg obj] [method {info object methods}] ...]
[para] Description of [method {info object methods}] ...

[call [arg obj] [method {info object mixin classes}] ...]
[para] Description of [method {info object mixin classes}] ...

[call [arg obj] [method {info object mixin guard}] ...]
[para] Description of [method {info object mixin guard}] ...

[call [arg obj] [method {info object slots}] ...]
[para] Description of [method {info object slots}] ...

[call [arg obj] [method {info object variables}] ...]
[para] Description of [method {info object variables}] ...

[call [arg obj] [method {info parameter default}] ...]
[para] Description of [method {info parameter default}] ...

[call [arg obj] [method {info parameter name}] ...]
[para] Description of [method {info parameter name}] ...

[call [arg obj] [method {info parameter syntax}] ...]
[para] Description of [method {info parameter syntax}] ...

[call [arg obj] [method {info parameter type}] ...]
[para] Description of [method {info parameter type}] ...

[call [arg obj] [method {info parent}]]

Returns the fully qualified name of the parent object of [arg obj], if
any. If there is no parent object, the name of the Tcl
namespace containing [arg obj] (e.g., "::") will be reported.

[call [arg obj] [method {info precedence}] [opt [option -intrinsic]] [opt [arg pattern]]]

Lists the classes from which [arg obj] inherits structural (e.g.,
properties) and behavioral features (e.g., methods) and methods, in
order of the [term linearisation] scheme in [term NX]. By setting the
[term switch] [option -intrinsic], only classes which participate in
superclass/subclass relationships (i.e., intrinsic classes) are
returned. If a [arg pattern] is provided, only nested classes whose
names match [arg pattern] are returned. The [arg pattern] string can
contain special matching characters (see [cmd "string match"]).

[call [arg obj] [method {info variable definition}] ...]
[para] Description of [method {info variable definition}] ...

[call [arg obj] [method {info variable name}] ...]
[para] Description of [method {info variable name}] ...

[call [arg obj] [method {info variable parameter}] ...]
[para] Description of [method {info variable parameter}] ...

[call [arg obj] [method {info vars}] [opt [arg pattern]]]

Yields a list of variable names created and defined for the scope of
[arg obj]. The list can be limited to object variables whose names
match [arg pattern]. The [arg pattern] string can contain special
matching characters (see [cmd "string match"]).

[list_end]

[cmd_def method]

[list_begin definitions]

[include method.man.inc]

[list_end]

[cmd_def move]

[list_begin definitions]

[call [arg obj] [method move] [arg newObjectName]]

Effectively renames an object. First, the source object [arg obj] is
cloned into a target object [arg newObjectName] using [method copy]. Second,
the source object [arg obj] is destroyed by invoking [method destroy]. 
[method move] is also called internally when [cmd rename] is
performed for a Tcl command representing an object.

[list_end]

[cmd_def object]

[list_begin definitions]

[call [arg obj] [method {object filter}] ...]
[para] Description of [method {object filter}] ...

[call [arg obj] [method {object mixin}] ...]
[para] Description of [method {object mixin}] ...

[call [arg obj] [method {object variable}] ...]
[para] Description of [method {object variable}] ...

[list_end]

[cmd_def require]

[list_begin definitions]

[call [arg obj] [method require] [method namespace]]

Create a Tcl namespace named after the object [arg obj]. All object
variables become available as namespace variables.

[include require.man.inc]

[list_end]

[cmd_def property]

[list_begin definitions]

[call [arg obj] [const object] [method property] [opt "-accessor public|private|protected"] [opt "-configurable [arg trueFalse]"] [opt -incremental] [opt "-class [arg className]"] [opt -nocomplain] [arg spec] [opt [arg initBlock]]]

[include property.man.inc]

[para]

By default, the [term property] will ascertain that no (potentially)
pre-existing and equally named object variable will be overwritten
when defining the property. In case of a conflict, an error exception
is thrown:

[example {
% Object create obj { set :x 1 }
::obj
% ::obj object property {x 2}
object ::obj has already an instance variable named 'x'
}]

If the [term switch] [option -nocomplain] is on, this check is omitted (continuing the above example):

[example {
% ::obj object property -nocomplain {x 2}
% ::obj eval {set :x}
2
}]

[list_end]

[cmd_def alias]
[list_begin definitions]

[call [arg obj] [opt "public | private | protected"] [const object] [cmd alias] [arg methodName] [opt "-returns [arg valueChecker]"] [opt "-frame object | method"] [arg cmdName]]

[include alias.man.inc]

[list_end]


[cmd_def delete]

[list_begin definitions]

[include delete.man.inc]

[list_end]

[list_end]


[section {Internally called Methods}]

[cmd nx::Object] provides a set of default implementations for
internally called methods, which are called primarily during the 
creation or destruction of NX objects.

Application developers can provide custom implementations of these
methods by providing tailored implementations for these methods in application
classes (i.e., subclasses of [cmd nx::Object]). An adequate method
implementation must comply with the method signature interfaces described below.


[list_begin commands]

[cmd_def defaultmethod]

[list_begin definitions]

[def "[arg obj] [cmd defaultmethod]"]

This method is called implicitly when the object is invoked without
a provided method name. By default, the [cmd defaultmethod] implementation 
returns the fully qualified object name.

[example_begin]
% Object create ::foo
::foo
% ::foo defaultmethod
::foo
% ::foo
::foo
[example_end]

[list_end]

[cmd_def init]

[list_begin definitions]

[def "[arg obj] [cmd init] [arg args]"]

The method [method init] is called during the object construction
process. It is invoked as the last step during object construction
(i.e. after method [method configure]) to provide the fully initialized 
state of the object. Note that the definition of an [method init] 
method must contain an empty parameter specification, 
since [method init] is always called with an empty argument list.

[example_begin]
% nx::Class create Foo {:property x}
% Foo method init {} {set :y [lb]expr {${:x} + 1}[rb]}
% Foo public method bar {} {return ${:y}}
% Foo create f1 -x 101
% f1 cget -x
101
% f1 bar
102
[example_end]
[list_end]

[cmd_def unknown]

[list_begin definitions]

[def "[arg obj] [cmd unknown] [arg unknownMethodName] [arg args]"]

This method is called implicitly whenever an unknown method is invoked.

[list_begin arguments]

[arg_def "" unknownMethodName in] 

Indicates the unresolvable method name

[arg_def "" args in]

Contains the remainder of the original argument vector of the
indirected method invocation

[list_end]

[list_end]

[list_end] [comment { COMMANDS list }]

[manpage_end]
